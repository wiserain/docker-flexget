name: docker-buildx

on:
  watch:
    types: [started]
  schedule:
    - cron: "0 21 * * 5"
  push:
    branches:
      - 'master'
  pull_request:

env:
  DOCKERHUB_USER: wiserain
  IMAGE_NAME: wiserain/flexget
  ALPINE_VER: '3.14'

jobs:
  buildx:
    runs-on: ubuntu-20.04
    if: (github.event_name != 'watch') || (github.actor == github.event.repository.owner.login)

    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Compile requirements.txt
        run: |
          docker run --rm -i -v ${PWD}:/req alpine:${{ env.ALPINE_VER }} \
            sh -c "apk add py3-pip build-base python3-dev libffi-dev && pip install pip-tools && cd /req && pip-compile -U"
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Initial Buildx
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          tags: ${{ env.IMAGE_NAME }}:testing
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            ALPINE_VER=${{ env.ALPINE_VER }}
      - 
        name: Load Built Image and Get Variables
        id: vars
        run: |
          docker buildx build \
            -t ${{ env.IMAGE_NAME }}:testing \
            --platform=linux/amd64 \
            --build-arg ALPINE_VER=${{ env.ALPINE_VER }} \
            --load \
            .
          CID=$(docker run -d ${{ env.IMAGE_NAME }}:testing)
          VER=$(docker exec $CID flexget -V | sed -n 1p)
          docker rm -f $CID
          echo ::set-output name=app_ver::${VER}
          echo ::set-output name=github_desc::$(curl -sX GET https://api.github.com/repos/${GITHUB_REPOSITORY} | jq -r .description)
          echo ::set-output name=github_branch::${GITHUB_REF#refs/heads/}
      - 
        name: Login to docker.io
        uses: docker/login-action@v1 
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      -
        name: Login to ghcr.io
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      - 
        name: Buildx and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.app_ver }}
            ghcr.io/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.app_ver }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            ALPINE_VER=${{ env.ALPINE_VER }}
          push: true
      -
        name: Update Dockerhub description
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}
          repository: ${{ env.IMAGE_NAME }}
          short-description: ${{ steps.vars.outputs.github_desc }}
      -
        name: Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.app_ver }}
            ghcr.io/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.app_ver }}
      -
        name: Commit requirements.txt
        uses: EndBug/add-and-commit@v8.0.1
        with:
          message: |
            Update requirements.txt
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: requirements.txt
          path: requirements.txt

  buildx-on-pr:
    runs-on: ubuntu-20.04
    if: github.event_name == 'pull_request' && (github.event_name != 'watch' || github.actor == github.event.repository.owner.login)
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Compile requirements.txt
        run: |
          docker run --rm -i -v ${PWD}:/req alpine:${{ env.ALPINE_VER }} \
            sh -c "apk add py3-pip build-base python3-dev libffi-dev && pip install pip-tools && cd /req && pip-compile -U"
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Initial Buildx
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          tags: ${{ env.IMAGE_NAME }}:testing
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            ALPINE_VER=${{ env.ALPINE_VER }}
      - 
        name: Load Built Image and Get Variables
        id: vars
        run: |
          docker buildx build \
            -t ${{ env.IMAGE_NAME }}:testing \
            --platform=linux/amd64 \
            --build-arg ALPINE_VER=${{ env.ALPINE_VER }} \
            --load \
            .
          CID=$(docker run -d ${{ env.IMAGE_NAME }}:testing)
          VER=$(docker exec $CID flexget -V | sed -n 1p)
          docker rm -f $CID
          echo ::set-output name=app_ver::${VER}
          echo ::set-output name=github_desc::$(curl -sX GET https://api.github.com/repos/${GITHUB_REPOSITORY} | jq -r .description)
          echo ::set-output name=github_branch::${GITHUB_REF#refs/heads/}
      -
        name: Login to docker.io
        uses: docker/login-action@v1
        if: github.actor == github.event.repository.owner.login
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}
      -
        name: Login to ghcr.io
        uses: docker/login-action@v1
        if: github.actor == github.event.repository.owner.login
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PAT }}
      - 
        name: Buildx and Push
        uses: docker/build-push-action@v2
        if: github.actor == github.event.repository.owner.login
        with:
          context: .
          file: Dockerfile
          tags: |
            ${{ env.IMAGE_NAME }}:testing
            ${{ env.IMAGE_NAME }}:testing-pr-${{ github.event.pull_request.number }}
            ghcr.io/${{ env.IMAGE_NAME }}:testing
            ghcr.io/${{ env.IMAGE_NAME }}:testing-pr-${{ github.event.pull_request.number }}
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          build-args: |
            ALPINE_VER=${{ env.ALPINE_VER }}
          push: true
      -
        name: Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          description: |
            ${{ env.IMAGE_NAME }}:testing
            ${{ env.IMAGE_NAME }}:testing-pr-${{ github.event.pull_request.number }}
            ghcr.io/${{ env.IMAGE_NAME }}:testing
            ghcr.io/${{ env.IMAGE_NAME }}:testing-pr-${{ github.event.pull_request.number }}
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: requirements.txt
          path: requirements.txt
